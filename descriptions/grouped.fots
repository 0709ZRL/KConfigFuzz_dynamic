group ID{
    fn getdomainname(name *Out [i8], l len<usize, name>)
    fn setdomainname(name *[i8], l len<usize, name>)
    fn getgroups(size len<i32, list>,   list *Out [gid_t])
    fn setgroups(size len<i32, list>,   list *[gid_t])
    fn gethostname(name *Out [i8], l len<usize, name> )
    fn sethostname(name *[i8], l len<usize, name> )
    fn getegid() gid_t
    fn setegid(egid gid_t)
    fn getgid() gid_t
    fn setgid(gid gid_t)
    fn getpid()  pid_t
    fn getppid() pid_t
    fn setpgid(pid pid_t, pgid pid_t)
    /* fn gettid()  pid_t */
    fn geteuid() uid_t
    fn seteuid(euid uid_t)
    fn getuid()  uid_t
    fn setuid(uid uid_t)
    fn setsid()  pid_t
    fn setfsgid(  fsgid uid_t)
    fn setfsuid(  fsuid uid_t)
    fn setns(  fd i32,  nstype i32)
    fn setpgrp()
    fn setpriority(  which i32,  who id_t, prio i32)
    fn setregid(  rgid gid_t,   egid gid_t)
    fn setresgid(  rgid gid_t,   egid gid_t,   sgid gid_t)
    fn setresuid(  ruid uid_t,   euid uid_t,   suid uid_t)
    fn setreuid(  ruid uid_t,   euid uid_t)
    fn gethostid()
    fn sethostid(hostid u32)
    fn getpriority( which i32, who id_t )
    fn getresgid( rgid *gid_t,  egid *gid_t,  sgid *gid_t)
    fn getresuid(ruid *uid_t,  euid *uid_t,  suid *uid_t)
    fn getcwd(buf *[i8], size len<usize, buf>)
}

group PROCESS_MANAGEMENT{
    fn fork() pid_t
    fn vfork() pid_t
    fn wait( wstatus *i32)
    fn wait3(wstatus *i32, options wait_options, rusage *Out rusage)
    fn wait4( pid pid_t, wstatus *i32, options wait_options , rusage *rusage)
    fn waitpid(pid pid_t, wstatus *i32, options wait_options)
    /* fn waitid( idtype idtype_t, id id_t,  infop *siginfo_t, options wait_options) */
    fn kill(pid pid_t, sig signalno_t)
    fn killpg(pgrp pid_t, sig signalno_t)
    /* fn tgkill(tgid pid_t, tid pid_t, sig signalno_t) */
    fn nanosleep(req *timespec,   rem *timespec)
    fn alarm(seconds u32)
    fn times(buf *Out tms) clock_t
    fn sbrk(increment isize)
    fn acct(f *filename)
}

group FILE_RW{
    fn chdir( path *filename)
    fn fchdir(fd fd_t)
    fn process_vm_readv( pid pid_t,
                             local_iov *[iovec],
                             liovcnt len<u32, local_iov>,
                             remote_iov *[iovec],
                             riovcnt len<u32, remote_iov>,
                             flags u32{0})

    fn process_vm_writev(pid pid_t,local_iov *[iovec], liovcnt len<u32, local_iov>,
                                                  remote_iov *[iovec],
                                                  riovcnt len<u32, remote_iov>,
                                                  flags u32{0})
    fn rmdir(pathname *filename)
    fn mkdir(pathname *filename, mode open_mode)
    fn mkdirat(dirfd fd_t, pathname *filename, mode open_mode)
    fn mknod(pathname *filename, mode i32,dev i32)
    fn mknodat(dirfd fd_t, pathname *filename, mode i32, dev i32)

    fn open(pathname *filename,flags open_flags, mode open_mode)fd_t
    fn open$special_file(pathname special_file, flags open_flags, mode open_mode)fd_t
    fn openat(dirfd fd_t, pathname *filename, flags open_flags, mode open_mode)fd_t
    fn creat(pathname *filename , mode open_mode) fd_t

    fn eventfd(initval i32, flags eventfd_flags) eventfd_t
    fn read$eventfd(fd eventfd_t, val *i64, l i32{8})
    fn write$eventfd(fd eventfd_t, val *i64, l i32{8})


    fn open$procfs(file procfs_file_t, flags open_flags, mode i32{0}) pidfd_t
    fn open$pidfd(file *cstr{"/proc/self"}, flags open_flags, mode i32{0}) pidfd_t
    fn open$thread_pidfd( file *cstr{"/proc/thread-self"}, flags open_flags, mode i32{0}) pidfd_t
    fn pipe( pipefd *Out [fd_t ; (2,3)])
    fn pipe2(pipefd *Out [fd_t ; (2,3)],  flags pipe_flags)

    fn rename(oldpath *filename, newpath *filename)
    fn renameat(olddirfd fd_t, oldpath *filename, newdirfd fd_t ,  newpath *filename)

    fn close(f  fd_t)

    fn access(pathname *filename, mode open_mode)
    fn faccessat(dirfd fd_t, pathname *filename, mode open_mode,  flags faccessat_flags)

    fn umask(mask open_mode)
    fn chmod(pathname *filename, mode open_mode)
    fn fchmod(fd fd_t, mode open_mode)
    fn fchmodat(dirfd fd_t, pathname *filename, mode open_mode , flags i32)

    fn chown(pathname *filename, owner uid_t,  g gid_t)
    fn lchown(pathname *filename, owner uid_t,  g gid_t)
    fn fchown(fd fd_t,owner uid_t,   g gid_t )
    fn fchownat(dirfd fd_t, pathname *filename, owner uid_t,  g gid_t , flags i32)

    fn chroot(path *filename)

    fn mount(source *filename, target *filename, filesystemtype fstype_t,mountflags u32, data *cstr)
    fn umount(target *filename)
    fn umount2(target *filename, flags i32)

    fn link(oldpath *filename, newpath *filename)
    fn linkat(olddirfd fd_t, oldpath *filename, newdirfd fd_t, newpath *filename, flags i32)
    fn symlink(target *filename , linkpath *filename)
    fn symlinkat(target *filename,  newdirfd fd_t, linkpath *filename)
    fn unlink(pathname *filename)
    fn unlinkat(dirfd fd_t, pathname *filename , flags i32)
    fn readlink(pathname *filename, buf *Out [i8], bufsiz len<usize, buf>)
    fn readlinkat(dirfd fd_t, pathname *filename, buf *[i8],  bufsiz len<usize, buf> )

    fn truncate( path *filename, length off_t)
    fn ftruncate( fd fd_t, length off_t)

    fn dup(old fd_t) fd_t
    fn dup2(oldfd fd_t, newfd i32)
    fn dup3(oldfd fd_t, newfd i32 , flags dup_flags)

    fn flock(fd fd_t, operation flock_op)
    fn fallocate(fd fd_t, mode i32, offset off_t,  l off_t)

    fn write(fd fd_t, buf *Out [i8], count len<i32, buf>)
    fn writev(fd fd_t,iov *[iovec],   iovcnt len<i32, iov>)
    fn pwrite(fd fd_t,  buf *[i8], count len<i32, buf>, offset off_t)
    fn pwritev(fd fd_t,iov *[iovec],   iovcnt len<i32, iov>, offset off_t)

    fn readahead(fd fd_t, offset off_t, count u32)
    fn read(fd fd_t, buf *In [i8], count len<i32, buf> )
    fn readv(ifd fd_t,iov *[iovec],   iovcnt len<i32, iov>)
    fn pread(fd fd_t,  buf *[i8], count len<i32, buf>, offset off_t)
    fn preadv(fd fd_t,iov *[iovec],   iovcnt len<i32, iov>, offset off_t)

    /*
    fn preadv2(fd fd_t, iov *[iovec],   iovcnt len<i32, iov> , offset off_t, flags i32)
    fn pwritev2(fd fd_t, iov *[iovec],   iovcnt len<i32, iov> , offset off_t, flags i32)
    */

    fn fcntl(fd fd_t, cmd i32, args *[i8])
    fn ioctl(fd fd_t, cmd i32, args *[i8])

    fn ioctl$void(fd fd_t, cmd ioctl_void)
    fn ioctl$int_in(fd fd_t, cmd ioctl_int_in, v  *In i32)
    fn ioctl$int_out(fd fd_t, cmd ioctl_int_out, v *Out i32)

    fn fcntl$dupfd(fd fd_t, cmd fcntl_dupfd, arg fd_t) fd_t
    fn fcntl$getflags(fd fd_t, cmd fcntl_getflags)
    fn fcntl$setflags(fd fd_t, cmd fcntl_setfd, flags fcntl_flags)
    fn fcntl$setstatus(fd fd_t, cmd fcntl_setfl, flags fcntl_status)
    fn fcntl$lock(fd fd_t, cmd fcntl_lock, lock  *flock)
    fn fcntl$getown(fd fd_t, cmd fcntl_getown) pid_t
    fn fcntl$setown(fd fd_t, cmd fcntl_setown, pid pid_t)
    fn fcntl$getownex(fd fd_t, cmd fcntl_getown_ex, arg *Out f_owner_ex)
    fn fcntl$setownex(fd fd_t, cmd fcntl_setown_ex, arg *f_owner_ex)
    fn fcntl$setsig(fd fd_t, cmd fcntl_setsig, sig signalno_t)
    fn fcntl$setlease(fd fd_t, cmd fcntl_F_SETLEASE, typ flock_type)
    fn fcntl$notify(fd fd_t, cmd fcntl_F_NOTIFY, typ fcntl_notify)
    fn fcntl$setpipe(fd fd_t, cmd fcntl_F_SETPIPE_SZ, sz u32)
    fn fcntl$addseals(fd fd_t, cmd fcntl_F_ADD_SEALS, seals seal_types)
    fn fcntl$F_GET_RW_HINT(fd fd_t, cmd fcntl_F_GET_RW_HINT, hint *Out i64)
    fn fcntl$F_GET_FILE_RW_HINT(fd fd_t, cmd fcntl_F_GET_FILE_RW_HINT, hint *i64)
    fn fcntl$F_SET_RW_HINT(fd fd_t, cmd   fcntl_F_SET_RW_HINT, hint *fcntl_rw_hint)
    fn fcntl$F_SET_FILE_RW_HINT(fd fd_t, cmd fcntl_F_SET_FILE_RW_HINT, hint *fcntl_rw_hint)

    fn sendfile(out_fd fd_t, in_fd fd_t, offset off_t, count size_t)
    fn splice(fd_in fd_t, off_in *i64, fd_out fd_t, off_out *i64, l u32, flags splice_flags)
    fn tee(fd_in fd_t, fd_out fd_t,l i32, flags splice_flags)
    fn vmsplice(fd fd_t, iov *[iovec],  nr_segs len<u32, iov>, flags splice_flags)
    fn lseek(fd fd_t, offset off_t, whence seek_whence)
    /*
    fn copy_file_range(fd_in fd_t, off_in *i64, fd_out fd_t, off_out *i64, l i32,   flags i32{0})
    fn getrandom(buf *[i8], buflen len<i32, buf>, flags random_flags)
    */

    fn sync()
    fn syncfs(fd fd_t)
    fn fsync(fd fd_t)
    fn fdatasync(fd fd_t)
    fn sync_file_range(fd fd_t, offset off_t, nbytes off_t, flags sync_file_flags)

    fn swapoff(path *filename)
    fn swapon(path *filename, swapflags i32)

    fn mmap(addr special_int_t, length special_int_t, prot mmap_prot, flags mmap_flags, fd fd_t, offset off_t)vm_t
    fn munmap(addr vm_t, length vm_t)
    fn mremap(old_address vm_t, old_size special_int_t, new_size special_int_t, flags mremap_flags, new_addr special_int_t)vm_t
    fn mprotect(addr vm_t,  l special_int_t, prot mmap_prot)
    fn msync(addr vm_t, length special_int_t, flags msync_flags)
    fn mincore(addr special_int_t, size_t  special_int_t , vec *Out [i8; (1024,16384)])
    fn mlock(addr vm_t,  l special_int_t )
    /* fn mlock2(addr vm_t, l special_int_t, flags mlock_flags) */
    fn munlock(addr vm_t, l special_int_t)
    fn mlockall(flags mlockall_flags)
    fn munlockall()
    /*
    fn pkey_alloc(flags i32{0}, access_rights pkey_flags) pkey_t
    fn pkey_free(pkey pkey_t)
    fn pkey_mprotect(addr vm_t, l special_int_t, prot mmap_prot, key pkey_t)
    */
    fn epoll_create(size i32)  epollfd_t
    fn epoll_create1(flags epoll_flags)  epollfd_t
    fn epoll_ctl$EPOLL_CTL_ADD(epfd epollfd_t, op epoll_EPOLL_CTL_ADD, fd fd_t, ev *epoll_event)
    fn epoll_ctl$EPOLL_CTL_MOD(epfd epollfd_t, op epoll_EPOLL_CTL_MOD, fd fd_t, ev *epoll_event)
    fn epoll_ctl$EPOLL_CTL_DEL(epfd epollfd_t, op epoll_EPOLL_CTL_DEL, fd fd_t, ev *epoll_event)
    fn epoll_pwait(epfd epollfd_t, events *[epoll_event], maxevents len<i32, events>, timeout i32,sigmask *sigset_t)
    fn epoll_wait( epfd epollfd_t, events *[epoll_event], maxevents len<i32, events>, timeout i32 )

    fn ppoll(fds *[pollfd], nfds len<u32, fds>, tmo_p *timespec, sigmask *sigset_t)
    fn poll(fds *[pollfd], nfds len<u32, fds>, timeout i32)
}

group FILE_STAT{
    /*fn statx(dirfd fd_t, pathname  *filename, flags i32, mask u32,  statxbuf *Out statx)/*
    fn fremovexattr( fd fd_t ,  name *cstr)
    fn lremovexattr(path *filename, name *cstr)
    fn removexattr(path *filename, name *cstr)
    fn fsetxattr(fd  fd_t,  name *cstr, value *[i8], size len<usize, value>, flags i32)
    fn setxattr(path *filename,  name *cstr, value *[i8],size len<usize, value>,flags i32)
    fn lsetxattr(path *filename,  name *cstr, value *[i8],size len<usize, value>,flags i32 )
    fn fgetxattr(fd fd_t, name *cstr, value *[i8], size len<i32, value>)
    fn flistxattr( fd fd_t, list *[i8], size len<i32, list>)
    fn getxattr( path  *filename,  name *cstr, value *[i8], size len<i32, value> )
    fn lgetxattr(path  *filename,  name *cstr, value *[i8], size len<i32, value>)
    fn listxattr(path  *filename ,  list *[i8], size len<i32, list>)
    fn llistxattr(path  *filename, list *[i8], size len<i32, list> )

    fn stat(pathname *filename, statbuf *Out stat)
    fn lstat(pathname *filename , statbuf *Out stat)
    fn fstat(fd fd_t,  statbuf *Out stat)
    fn fstatat(dirfd fd_t, pathname *filename , statbuf *Out stat, flags i32)
    fn statfs( path *filename, buf *Out statfs)
    fn fstatfs(fd fd_t,  buf *Out statfs)
    fn statvfs(path *filename, buf *Out statvfs)
    fn fstatvfs(fd  fd_t,  buf *Out statvfs)

    fn utime(f *filename ,  times *utimbuf)
    fn utimensat(dirfd fd_t,  pathname *filename,  times *[timespec;(2,3)], flags  utimensat_flags)
    fn utimes( f *filename , times *[timespec;(2,3)])

    /* provide fd*/
    fn open(pathname *filename,flags open_flags, mode open_mode)fd_t
    fn open$special_file(pathname special_file, flags open_flags, mode open_mode)fd_t
    fn openat(dirfd fd_t, pathname *filename, flags open_flags, mode open_mode)fd_t
    fn creat(pathname *filename , mode open_mode) fd_t
}
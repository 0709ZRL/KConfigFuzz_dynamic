type ssize_t = isize
type off_t = i32
type size_t = u32
type clock_t = u32
type sa_family_t = u16
type socklen_t = u32
type id_t = u32
type dev_t = u32
type ino_t = u32
type mode_t = u32
type nlink_t = u32
type blksize_t = i32
type blkcnt_t = i32
type sigset_t = *[i8; 128]
type time_t = i32
type __fsword_t = i32
type fsblkcnt_t = u32
type fsfilcnt_t = u32
type clockid_t = i32
type key_t = i32
type rlim_t = u32
type idtype_t = u32
type signalno_t =  i32{(0,65)}
type special_int_t = i32{0,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152}
type vm_t = res<special_int_t>
type fd_t = res<i32>
type sockfd_t = res<i32>
type epollfd_t = res<i32>
type gid_t = res<u32>
type pid_t = res<u32>
type uid_t = res<u32>
type fanotifyfd_t = res<i32>
type inotifyfd_t = res<i32>
type pkey_t = res<i32>
type mqfd_t = res<i32>
type timeridfd_t = res<i32>
type procfs_file_t = *cstr{"/proc/keys", "/proc/key-users", "/proc/crypto",
                            "/proc/consoles", "/proc/cgroups", "/proc/zoneinfo",
                            "/proc/vmstat", "/proc/vmallocinfo", "/proc/tty/drivers",
                            "/proc/tty/ldiscs", "/proc/timer_list", "/proc/sysvipc/sem",
                            "/proc/sysvipc/msg", "/proc/sysvipc/shm", "/proc/stat", "/proc/slabinfo",
                            "/proc/schedstat", "/proc/partitions", "/proc/meminfo", "/proc/mdstat",
                            "/proc/locks", "/proc/diskstats", "/proc/cpuinfo", "/proc/consoles",
                             "/proc/bus/input/devices", "/proc/bus/input/handlers", "/proc/asound/seq/clients",
                             "/proc/asound/seq/clients", "/proc/asound/seq/timer", "/proc/asound/timers"}
type mq_t = res<i32>
type pidfd_t = res<i32>
type eventfd_t =res<i32>
type ipc_sem_t = res<i32>
type timerfd_t = res<i32>

type special_file = *filename{"/dev/null","/dev/zero","/dev/full","/dev/vga_arbiter",
                          "/dev/qat_adf_ctl","/dev/irnet","/dev/hwrng","/dev/autofs","/dev/keychord",
                          "/dev/socket/zygote","/dev/sw_sync","/dev/pktcdvd/control","/dev/lightnvm/control",
                          "/dev/bsg","/dev/nvme-fabrics","/dev/ocfs2_control","/dev/nvram","/dev/nmem0","/dev/ndctl0",
                          "/dev/ndctl0","/dev/cachefiles","/dev/ubi_ctrl","/dev/btrfs-control","/dev/dlm_plock",
                          "/dev/dlm-monitor","/dev/dlm-control","/dev/xen/evtchn","/dev/sequencer2","/dev/sequencer","tty"
                          }
type fstype_t = *cstr{"btrfs", "ext4", "jfs", "xfs","vfat",
                      "fuse", "tmpfs", "cgroup", "proc",
                      "mqueue", "nfs", "cifs","iso9660"}

struct utimbuf {
    actime       time_t
    modtime      time_t
}

struct ucontext_t {
          uc_sigmask        sigset_t
          uc_stack          stack_t
   /* ... */
}

struct stack_t {
     ss_flags  i32
     ss_size   i32
     /* ...  */
}

struct iovec {
       iov_base *[i8]    /* Starting address */
       iov_len  len<i32, iov_base>     /* Number of bytes to transfer */
}

struct sched_attr {
     size              u32
     sched_policy      u32
     sched_flags       u32
     sched_nice        i32

     sched_priority     u32
     sched_runtime      u32
     sched_deadline     u32
     sched_period       u32
 }

struct sched_param {
    /* ... */
    sched_priority i32
    /* ... */
}

struct siginfo_t {
         si_signo    i32
         si_errno    i32
         si_code     i32
         si_trapno   i32
}

union sigval {
    sival_int i32
    sival_ptr usize
}

struct sigevent {
    sigev_notify  i32
    sigev_signo   i32
    sigev_value   sigval
    sigev_notify_thread_id  pid_t
    /*
    void       (*sigev_notify_function) (union sigval)
    void        *sigev_notify_attributes
    */
}

struct utsname {
       sysname   *cstr
       nodename  *cstr
       release   *cstr
       version   *cstr
       machine   *cstr
}

struct kexec_segment{
        buf *[i8]
        bufsz len<i32, buf>
}

struct sysinfo {
    uptime          u32             /* Seconds since boot */
    totalram        u32
    freeram         u32
    sharedram       u32
    bufferram       u32
    totalswap       u32
    freeswap        u32
    procs           u16
    /*     loads           *[u32;3] */
}

struct mq_attr {
     mq_flags      i32
     mq_maxmsg     i32
     mq_msgsize    i32
     mq_curmsgs    i32

}

struct flock {
    l_type    u16
    l_whence  u16
    l_start       off_t
    l_len         off_t
    l_pid         pid_t
}

struct f_owner_ex {
    /* type    i32 */
    pid     pid_t
}

struct rusage {
    ru_utime        timeval
    ru_stime        timeval
    ru_maxrss        u32
    ru_ixrss         u32
    ru_idrss         u32
    ru_isrss         u32
    ru_minflt        u32
    ru_majflt        u32
    ru_nswap         u32
    ru_inblock       u32
    ru_oublock       u32
    ru_msgsnd        u32
    ru_msgrcv        u32
    ru_nsignals      u32
    ru_nvcsw         u32
    ru_nivcsw        u32
}

struct timezone {
     tz_minuteswest       i32
     tz_dsttime           i32
}

struct rlimit {
        rlim_cur    rlim_t
        rlim_max    rlim_t
}

struct itimerval {
       it_interval  timeval
       it_value     timeval
}

struct statx_timestamp {
               tv_sec     u32
               tv_nsec    u32
}

struct statx {
                stx_mask                u32
                stx_blksize             u32
                stx_attributes          u32
                stx_nlink               u32
                stx_uid                 u32
                stx_gid                 u32
                stx_mode                u16
                stx_ino                 u32
                stx_size                u32
                stx_blocks              u32
                stx_attributes_mask     u32
                stx_atime       statx_timestamp
                stx_btime       statx_timestamp
                stx_ctime       statx_timestamp
                stx_mtime       statx_timestamp
                stx_rdev_major   u32
                stx_rdev_minor   u32
                stx_dev_major    u32
                stx_dev_minor    u32
}

struct linux_dirent {
     d_ino             u32
     d_off             u32
     d_reclen          u16
}

struct statvfs {
      f_bsize           u32
      f_frsize          u32
      f_blocks          fsblkcnt_t
      f_bfree           fsblkcnt_t
      f_bavail          fsblkcnt_t

      f_files           fsfilcnt_t
      f_ffree           fsfilcnt_t
      f_favail          fsfilcnt_t

      f_fsid            u32
      f_flag            u32
      f_namemax         u32
}

struct statfs {
    f_type         __fsword_t
    f_bsize        __fsword_t
    f_blocks        fsblkcnt_t
    f_bfree        fsblkcnt_t
    f_bavail        fsblkcnt_t
     f_files        fsfilcnt_t
     f_ffree        fsfilcnt_t
    /*fsid_t     f_fsid*/
    f_namelen       __fsword_t
    f_frsize        __fsword_t
    f_flags         __fsword_t

}

struct stat {
          st_dev            dev_t
          st_ino            ino_t
          st_mode           mode_t
          st_nlink          nlink_t
          st_uid            uid_t
          st_gid            gid_t
          st_rdev           dev_t
          st_size           off_t
          st_blksize        blksize_t
          st_blocks         blkcnt_t
          st_atim           timespec
          st_mtim           timespec
          st_ctim           timespec

}

struct tms {
        tms_utime clock_t
        tms_stime clock_t
        tms_cutime clock_t
        tms_cstime clock_t
}

struct sockaddr {
    sa_family: sa_family_t,
    /*ignore left field*/
}

struct timeval{
    tv_sec i32
    tv_usec i32
}

struct timex {
        modes i32      /* Mode selector */
        offset i32     /* Time offset nanoseconds, if STA_NANO
                           status flag is set, otherwise
                           microseconds */
        freq i32       /* Frequency offset see NOTES for units */
       maxerror i32   /* Maximum error (microseconds) */
       esterror i32   /* Estimated error (microseconds) */
       status i32     /* Clock command/status */
       constant i32   /* PLL (phase-locked loop) time constant */
       precision i32  /* Clock precision
                           (microseconds, read-only) */
       tolerance i32  /* Clock frequency tolerance (read-only)
                           see NOTES for units */
       time     timeval
                        /* Current time (read-only, except for
                           ADJ_SETOFFSET) upon return, time.tv_usec
                           contains nanoseconds, if STA_NANO status
                           flag is set, otherwise microseconds */
       tick     i32       /* Microseconds between clock ticks */
       ppsfreq  i32    /* PPS (pulse per second) frequency
                           (read-only) see NOTES for units */
       jitter   i32     /* PPS jitter (read-only) nanoseconds, if
                           STA_NANO status flag is set, otherwise
                           microseconds */
       shift    i32      /* PPS interval duration
                           (seconds, read-only) */
       stabil   i32     /* PPS stability (read-only)
                           see NOTES for units */
       jitcnt   i32     /* PPS count of jitter limit exceeded
                           events (read-only) */
       calcnt   i32     /* PPS count of calibration intervals
                           (read-only) */
       errcnt   i32     /* PPS count of calibration errors
                           (read-only) */
       stbcnt   i32     /* PPS count of stability limit exceeded
                           events (read-only) */
       tai      i32         /* TAI offset, as set by previous ADJ_TAI
                           operation (seconds, read-only,
                           since Linux 2.6.26) */
}

struct bpf_attr{    /* Used by BPF_MAP_CREATE */
       map_type     u32
       key_size     u32    /* size of key in bytes */
       value_size   u32  /* size of value in bytes */
       max_entries  u32 /* maximum number of entries
                                  in a map */
}

struct __user_cap_header_struct {
   version  u32
   pid      i32
}

type cap_user_header_t = *__user_cap_header_struct
struct __user_cap_data_struct {
   effective    u32
   permitted    u32
   inheritable  u32
}

type cap_user_data_t = *__user_cap_data_struct

union epoll_data {
    fd          fd_t
}

struct epoll_event {
     events         u32
     data           epoll_data
}

struct timespec {
        tv_sec       time_t
        tv_nsec      i32
}

struct itimerspec {
        it_interval    timespec
        it_value       timespec
}

struct old_linux_dirent {
     d_ino         u32
     d_offset      u32
     d_namlen      u16
     d_name         *cstr
}

struct pollfd {
          fd    fd_t         /* file descriptor */
          events    pollfd_events     /* requested events */
          revents   u16{0}    /* returned events */
}

struct mq_attr {
        mq_flags        i32
        mq_maxmsg       i32
        mq_msgsize      i32
        mq_curmsgs      i32
}

flag syslog_cmd {
    SYSLOG_ACTION_CLOSE = 0,
    SYSLOG_ACTION_OPEN = 1 ,
    SYSLOG_ACTION_READ = 2,
    SYSLOG_ACTION_READ_ALL = 3,
    SYSLOG_ACTION_READ_CLEAR = 4,
    SYSLOG_ACTION_SIZE_UNREAD = 9 ,
    SYSLOG_ACTION_SIZE_BUFFER = 10,
}

flag faccessat_flags{F1 = 0x100, F2= 0x200, F3 = 0x400, F4 = 0x800, F5 = 0x1000}
flag statx_flags{AT_STATX_FORCE_SYNC=8192,AT_STATX_SYNC_AS_STAT=0,AT_SYMLINK_NOFOLLOW=256,AT_EMPTY_PATH=4096,AT_STATX_SYNC_TYPE=24576,AT_SYMLINK_FOLLOW=1024,AT_NO_AUTOMOUNT=2048,AT_STATX_DONT_SYNC=16384}
flag flock_type{F_UNLCK=2,F_WRLCK=1,F_RDLCK=0}
flag fcntl_getown_ex{F_GETOWN_EX=16}
flag open_mode{S_IXUSR=64,S_IXGRP=8,S_IROTH=4,S_IXOTH=1,S_IRUSR=256,S_IWUSR=128,S_IRGRP=32,S_IWGRP=16,S_IWOTH=2}
flag fcntl_F_SET_RW_HINT{F_SET_RW_HINT=1036}
flag fcntl_flags{FD_CLOEXEC=1}
flag mlockall_flags{MCL_CURRENT=1,MCL_ONFAULT=4,MCL_FUTURE=2}
flag clock_type{CLOCK_MONOTONIC_RAW=4,CLOCK_MONOTONIC_COARSE=6,CLOCK_REALTIME=0,CLOCK_MONOTONIC=1,CLOCK_PROCESS_CPUTIME_ID=2,CLOCK_REALTIME_ALARM=8,CLOCK_BOOTTIME_ALARM=9,CLOCK_THREAD_CPUTIME_ID=3,CLOCK_REALTIME_COARSE=5,CLOCK_BOOTTIME=7}
flag fcntl_F_SETLEASE{F_SETLEASE=1024}
flag open_flags{O_DIRECTORY=65536,O_LARGEFILE=0,O_CREAT=64,O_NOATIME=262144,O_NOCTTY=256,O_PATH=2097152,O_TRUNC=512,O_NONBLOCK=2048,FASYNC=8192,O_SYNC=1052672,O_RDONLY=0,O_WRONLY=1,O_EXCL=128,__O_TMPFILE=4259840,O_DIRECT=16384,O_CLOEXEC=524288,O_NOFOLLOW=131072,O_APPEND=1024,O_RDWR=2}
flag epoll_EPOLL_CTL_ADD{EPOLL_CTL_ADD=1}
flag epoll_ev{POLLOUT=4,POLLERR=8,EPOLLET=2147483648,POLLPRI=2,POLLHUP=16,POLLRDHUP=8192,EPOLLONESHOT=1073741824,EPOLLEXCLUSIVE=268435456,EPOLLWAKEUP=536870912,POLLIN=1}
flag fcntl_dupfd{F_DUPFD=0,F_DUPFD_CLOEXEC=1030}
flag timerfd_create_flags{TFD_NONBLOCK=2048,TFD_CLOEXEC=524288}
flag mmap_prot{PROT_EXEC=4,PROT_GROWSUP=33554432,PROT_WRITE=2,PROT_GROWSDOWN=16777216,PROT_NONE=0,PROT_READ=1}
flag flock_op{LOCK_SH=1,LOCK_UN=8,LOCK_NB=4,LOCK_EX=2}
flag ioctl_int_in{FIONBIO=21537,FIOASYNC=21586}
flag mq_open_flags{O_WRONLY=1,O_RDWR=2,O_EXCL=128,O_RDONLY=0,O_NONBLOCK=2048,O_CREAT=64}
flag fcntl_lock{F_SETLKW=7,F_OFD_SETLKW=38,F_OFD_GETLK=36,F_GETLK=5,F_SETLK=6,F_OFD_SETLK=37}
flag personality_flags{PER_UW7=68157454,READ_IMPLIES_EXEC=4194304,STICKY_TIMEOUTS=67108864,PER_BSD=6,PER_OSR5=100663299,ADDR_NO_RANDOMIZE=262144,PER_IRIX32=67108873,WHOLE_SECONDS=33554432,ADDR_COMPAT_LAYOUT=2097152,ADDR_LIMIT_3GB=134217728,PER_RISCOS=12,MMAP_PAGE_ZERO=1048576,PER_IRIXN32=67108874,PER_XENIX=83886087,PER_SVR3=83886082,PER_WYSEV386=83886084,PER_ISCR4=67108869,PER_HPUX=16,PER_SVR4=68157441,SHORT_INODE=16777216,PER_SOLARIS=67108877,ADDR_LIMIT_32BIT=8388608,PER_LINUX32=8,PER_LINUX=0,PER_OSF4=15,PER_IRIX64=67108875}
flag fcntl_setown_ex{F_SETOWN_EX=15}
flag pipe_flags{O_DIRECT=16384,O_NONBLOCK=2048,O_CLOEXEC=524288}
flag dup_flags{O_CLOEXEC=524288}
flag fcntl_F_SET_FILE_RW_HINT{F_SET_FILE_RW_HINT=1038}
flag fcntl_getown{F_GETOWN=9}
flag splice_flags{SPLICE_F_GIFT=8,SPLICE_F_MOVE=1,SPLICE_F_MORE=4,SPLICE_F_NONBLOCK=2}
flag fcntl_notify{DN_ACCESS=1,DN_ATTRIB=32,DN_MODIFY=2,DN_RENAME=16,DN_MULTISHOT=2147483648,DN_DELETE=8,DN_CREATE=4}
flag sync_file_flags{SYNC_FILE_RANGE_WAIT_AFTER=4,SYNC_FILE_RANGE_WRITE=2,SYNC_FILE_RANGE_WAIT_BEFORE=1}
flag pollfd_events{POLLNVAL=32,POLLRDNORM=64,POLLRDBAND=128,POLLMSG=1024,POLLERR=8,POLLOUT=4,POLLREMOVE=4096,POLLRDHUP=8192,POLLHUP=16,POLLIN=1,POLLWRNORM=256,POLLPRI=2,POLLWRBAND=512}
flag fcntl_status{O_APPEND=1024,FASYNC=8192,O_NONBLOCK=2048,O_NOATIME=262144,O_DIRECT=16384}
flag fcntl_F_GET_RW_HINT{F_GET_RW_HINT=1035}
flag mmap_flags{MAP_NONBLOCK=65536,MAP_FIXED=16,MAP_NORESERVE=16384,MAP_HUGETLB=262144,MAP_EXECUTABLE=4096,MAP_FILE=0,MAP_PRIVATE=2,MAP_DENYWRITE=2048,MAP_STACK=131072,MAP_SYNC=524288,MAP_FIXED_NOREPLACE=1048576,MAP_POPULATE=32768,MAP_LOCKED=8192,MAP_ANONYMOUS=32,MAP_32BIT=64,MAP_SHARED=1,MAP_GROWSDOWN=256,MAP_SHARED_VALIDATE=3}
flag fadvise_flags{POSIX_FADV_SEQUENTIAL=2,POSIX_FADV_NORMAL=0,POSIX_FADV_NOREUSE=5,POSIX_FADV_WILLNEED=3,POSIX_FADV_DONTNEED=4,POSIX_FADV_RANDOM=1}
flag seek_whence{SEEK_END=2,SEEK_CUR=1,SEEK_DATA=3,SEEK_HOLE=4,SEEK_SET=0}
flag epoll_EPOLL_CTL_MOD{EPOLL_CTL_MOD=3}
flag ioctl_void{FIONCLEX=21584,FIOCLEX=21585}
flag msync_flags{MS_SYNC=4,MS_INVALIDATE=2,MS_ASYNC=1}
flag pkey_flags{PKEY_DISABLE_WRITE=2,PKEY_DISABLE_ACCESS=1}
flag epoll_flags{EPOLL_CLOEXEC=524288}
flag ioctl_int_out{FIOQSIZE=21600}
flag random_flags{GRND_NONBLOCK=1,GRND_RANDOM=2}
flag seal_types{F_SEAL_GROW=4,F_SEAL_SHRINK=2,F_SEAL_WRITE=8,F_SEAL_SEAL=1}
flag eventfd_flags{EFD_NONBLOCK=2048,EFD_SEMAPHORE=1,EFD_CLOEXEC=524288}
flag utimensat_flags{AT_SYMLINK_NOFOLLOW=256}
flag epoll_EPOLL_CTL_DEL{EPOLL_CTL_DEL=2}
flag fcntl_setsig{F_SETSIG=10}
flag fcntl_F_ADD_SEALS{F_ADD_SEALS=1033}
flag fcntl_setown{F_SETOWN=8}
flag fcntl_setfd{F_SETFD=2}
flag mlock_flags{MLOCK_ONFAULT=1}
flag timerfd_settime_flags{TFD_TIMER_ABSTIME=1}
flag fcntl_setfl{F_SETFL=4}
flag sched_policy{SCHED_BATCH=3,SCHED_RR=2,SCHED_IDLE=5,SCHED_FIFO=1,SCHED_DEADLINE=6}
flag mremap_flags{MREMAP_MAYMOVE=1,MREMAP_FIXED=2}
flag signalfd_flags{SFD_NONBLOCK=2048,SFD_CLOEXEC=524288}
flag fcntl_F_GET_FILE_RW_HINT{F_GET_FILE_RW_HINT=1037}
flag fcntl_getflags{F_GETLEASE=1025,F_GET_SEALS=1034,F_GETFD=1,F_GETSIG=11,F_GETPIPE_SZ=1032,F_GETFL=3}
flag fcntl_rw_hint{RWH_WRITE_LIFE_MEDIUM=3,RWH_WRITE_LIFE_EXTREME=5,RWH_WRITE_LIFE_SHORT=2,RWF_WRITE_LIFE_NOT_SET=0,RWH_WRITE_LIFE_NONE=1,RWH_WRITE_LIFE_LONG=4}
flag wait_options{WNOWAIT=16777216,WSTOPPED=2,WEXITED=4,WNOHANG=1,__WNOTHREAD=536870912,WCONTINUED=8,__WCLONE=2147483648,__WALL=1073741824,WUNTRACED=2}
flag fcntl_F_NOTIFY{F_NOTIFY=1026}
flag fcntl_F_SETPIPE_SZ{F_SETPIPE_SZ=1031}
flag membarrier_cmd{MEMBARRIER_CMD_GLOBAL_EXPEDITED=2,MEMBARRIER_CMD_GLOBAL=1,MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED=16,MEMBARRIER_CMD_QUERY=0,MEMBARRIER_CMD_SHARED=1,MEMBARRIER_CMD_PRIVATE_EXPEDITED=8,MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED=4,MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE=64,MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE=32}
flag ptrace_PTRACE_SECCOMP_GET_FILTER{PTRACE_SECCOMP_GET_FILTER=16908}
flag ptrace_PTRACE_POKEUSR{PTRACE_POKEUSER=6}
flag rlimit_type{RLIMIT_CPU=0,RLIMIT_DATA=2,RLIMIT_RTTIME=15,RLIMIT_MEMLOCK=8,RLIMIT_NPROC=6,RLIMIT_RTPRIO=14,RLIMIT_STACK=3,RLIMIT_LOCKS=10,RLIMIT_MSGQUEUE=12,RLIMIT_NICE=13,RLIMIT_NOFILE=7,RLIMIT_RSS=5,RLIMIT_FSIZE=1,RLIMIT_SIGPENDING=11,RLIMIT_CORE=4,RLIMIT_AS=9}
flag memfd_flags{MFD_CLOEXEC=1,MFD_ALLOW_SEALING=2,MFD_HUGETLB=4}
flag madvise_flags{MADV_WILLNEED=3,MADV_REMOVE=9,MADV_MERGEABLE=12,MADV_HUGEPAGE=14,MADV_DODUMP=17,MADV_WIPEONFORK=18,MADV_KEEPONFORK=19,MADV_DONTNEED=4,MADV_DOFORK=11,MADV_SEQUENTIAL=2,MADV_RANDOM=1,MADV_NORMAL=0,MADV_DONTFORK=10,MADV_NOHUGEPAGE=15,MADV_DONTDUMP=16,MADV_UNMERGEABLE=13,MADV_HWPOISON=100}
flag ptrace_PTRACE_GETREGSET{PTRACE_GETREGSET=16900}
flag ptrace_PTRACE_GETSIGINFO{PTRACE_GETSIGINFO=16898}
flag ptrace_req_setopts{PTRACE_SETOPTIONS=16896,PTRACE_SEIZE=16902}
flag ptrace_options{PTRACE_O_EXITKILL=1048576,PTRACE_O_TRACESYSGOOD=1,PTRACE_O_TRACEEXEC=16,PTRACE_O_TRACECLONE=8,PTRACE_O_TRACEVFORKDONE=32,PTRACE_O_TRACEVFORK=4,PTRACE_O_TRACEEXIT=64,PTRACE_O_TRACEFORK=2}
flag ptrace_req_cont{PTRACE_SINGLESTEP=9,PTRACE_SYSCALL=24,PTRACE_CONT=7,PTRACE_SYSEMU_SINGLESTEP=32,PTRACE_SYSEMU=31}
flag ptrace_req_poke{PTRACE_POKETEXT=4,PTRACE_POKEDATA=5}
flag ptrace_PTRACE_SETSIGINFO{PTRACE_SETSIGINFO=16899}
flag ptrace_req{PTRACE_LISTEN=16904,PTRACE_DETACH=17,PTRACE_INTERRUPT=16903,PTRACE_KILL=8,PTRACE_ATTACH=16}
flag ptrace_PTRACE_PEEKUSR{PTRACE_PEEKUSER=3}
flag ptrace_req_setregs{PTRACE_SETREGS=13,PTRACE_SETFPREGS=15}
flag sigprocmask_how{SIG_SETMASK=2,SIG_UNBLOCK=1,SIG_BLOCK=0}
flag ptrace_PTRACE_SECCOMP_GET_METADATA{PTRACE_SECCOMP_GET_METADATA=16909}
flag ptrace_PTRACE_SETREGSET{PTRACE_SETREGSET=16901}
flag at_flags{AT_SYMLINK_FOLLOW=1024,AT_SYMLINK_NOFOLLOW=256,AT_EMPTY_PATH=4096,AT_NO_AUTOMOUNT=2048}
flag kcmp_flags{KCMP_FS=3,KCMP_SIGHAND=4,KCMP_VM=1,KCMP_FILES=2,KCMP_FILE=0,KCMP_SYSVSEM=6,KCMP_IO=5}
flag ptrace_PTRACE_GETEVENTMSG{PTRACE_GETEVENTMSG=16897}
flag ptrace_req_getregs{PTRACE_GETREGS=12,PTRACE_GETFPREGS=14}
flag ptrace_req_peek{PTRACE_PEEKTEXT=1,PTRACE_PEEKDATA=2}
flag mknod_mode{S_IFSOCK=49152,S_IWUSR=128,S_IXGRP=8,S_ISGID=1024,S_IFBLK=24576,S_IRUSR=256,S_IFIFO=4096,S_IWOTH=2,S_IWGRP=16,S_IFCHR=8192,S_IXUSR=64,S_IRGRP=32,S_IXOTH=1,S_IFREG=32768,S_IROTH=4,S_ISUID=2048,S_ISVTX=512}